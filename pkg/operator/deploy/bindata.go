// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xcd\x6e\xe3\xc8\x11\xbe\xeb\x29\x0a\xce\xc1\x87\x58\xf2\x0c\x82\x00\x89\x6e\x86\xbd\x33\x11\x76\xc7\x63\xd8\xc6\xec\x61\xbd\x87\x52\xb3\x44\x55\xdc\xec\xe6\x56\x37\x65\x6b\x82\xbc\x7b\x50\x4d\x52\xa2\x64\x52\xb6\xc6\xc8\x65\xfb\x22\xb0\x7f\xbe\xfa\xaf\xae\x6a\x8d\xc6\xe3\xf1\x08\x4b\xfe\x46\x12\xd8\xbb\x29\x60\xc9\xf4\x1c\xc9\xe9\x57\x98\x3c\xfe\x23\x4c\xd8\x9f\xaf\x3e\x8e\x1e\xd9\x65\x53\xb8\xac\x42\xf4\xc5\x2d\x05\x5f\x89\xa1\x2b\x5a\xb0\xe3\xc8\xde\x8d\x0a\x8a\x98\x61\xc4\xe9\x08\x00\x9d\xf3\x11\x75\x3a\xe8\x27\x80\xf1\x2e\x8a\xb7\x96\x64\x9c\x93\x9b\x3c\x56\x73\x9a\x57\x6c\x33\x92\x04\xde\x92\x5e\x7d\x98\xfc\x7d\xf2\x61\x04\x60\x84\xd2\xf1\x7b\x2e\x28\x44\x2c\xca\x29\xb8\xca\xda\x11\x80\xc3\x82\xa6\x60\x6c\x15\x22\x49\x98\xa0\xf8\x89\x2f\xc9\x85\x25\x2f\xe2\x84\xfd\x28\x94\x64\x94\x66\x2e\xbe\x2a\xa7\xf0\x62\xbd\x46\x68\xd8\x6a\x44\xaa\xc1\xd2\x8c\xe5\x10\x7f\xee\xce\xfe\xc2\x21\xa6\x95\xd2\x56\x82\x76\x4b\x3a\x4d\x06\x76\x79\x65\x51\x36\xd3\x23\x80\x60\x7c\x49\x5d\xd4\x46\xbc\x44\x73\xdc\x08\xb0\xfa\x88\xb6\x5c\xe2\xc7\x1a\xc5\x2c\xa9\xc0\x9a\x25\x00\x65\xf7\xe2\x66\xf6\xed\x6f\x77\x3b\xd3\x00\x19\x05\x23\x5c\xc6\xa4\xaa\x06\x1e\x38\x40\x5c\x12\xd4\x7b\x61\xe1\x25\x7d\xb6\x4c\xc2\xc5\xcd\x6c\x73\xbe\x14\x5f\x92\x44\x6e\xa5\xaf\x47\xc7\xf4\x9d\xd9\x3d\x6a\xa7\xca\x50\xbd\x0b\x32\xb5\x39\xd5\x64\x1b\xd1\x28\x6b\x64\x00\xbf\x80\xb8\xe4\x00\x42\xa5\x50\x20\x57\x7b\xc1\x0e\x30\xe8\x26\x74\xe0\xe7\xff\x26\x13\x27\x70\x47\xa2\x30\x10\x96\xbe\xb2\x99\xba\xca\x8a\x24\x82\x90\xf1\xb9\xe3\xef\x1b\xec\x00\xd1\x27\xa2\x16\x23\x35\x46\xd9\x0e\x76\x91\xc4\xa1\x85\x15\xda\x8a\xce\x00\x5d\x06\x05\xae\x41\x48\xa9\x40\xe5\x3a\x78\x69\x4b\x98\xc0\x17\x2f\x04\xec\x16\x7e\x0a\xcb\x18\xcb\x30\x3d\x3f\xcf\x39\xb6\x2e\x6f\x7c\x51\x54\x8e\xe3\xfa\x3c\x79\x2f\xcf\xab\xe8\x25\x9c\x67\xb4\x22\x7b\x1e\x38\x1f\xa3\x98\x25\x47\x32\xb1\x12\x3a\xc7\x92\xc7\x89\x75\x97\xdc\x7e\x52\x64\x7f\x91\x26\x48\xc2\xe9\x0e\xaf\x71\xad\xee\x11\xa2\xb0\xcb\x3b\x0b\xc9\x17\x0f\x58\x40\xbd\x52\xad\x8d\xcd\xd1\x5a\x8a\xad\xa2\x75\x4a\xb5\x73\xfb\xd3\xdd\x3d\xb4\xa4\x93\x31\xf6\xb5\x9f\xf4\xbe\x3d\x18\xb6\x26\x50\x85\xb1\x5b\x90\xd4\x46\x5c\x88\x2f\x12\x26\xb9\xac\xf4\xec\x62\xe3\x5b\x4c\x6e\x5f\xfd\xa1\x9a\x17\x1c\xd5\xee\x7f\x54\x14\xa2\xda\x6a\x02\x97\x29\x0f\xc0\x9c\xa0\x2a\x33\x8c\x94\x4d\x60\xe6\xe0\x12\x0b\xb2\x97\x18\xe8\xff\x6e\x00\xd5\x74\x18\xab\x62\xdf\x66\x82\x6e\x0a\xdb\xdf\x5c\x6b\xad\xb3\xd0\x26\x9a\x01\x7b\x35\xf1\x79\x57\x92\xd9\x89\x98\x8c\x02\x8b\xfa\x74\xc4\x48\x1a\x09\xdd\xec\xd3\x8e\xfe\x48\xd5\x81\x46\xae\x7c\x81\xec\xf6\x17\x06\x85\x82\x3a\xc6\x67\x2e\xce\x6e\x8e\x3b\xd4\xd1\x6e\x6f\x86\xd8\x9e\xd7\xe0\xcb\xf7\x64\x00\xc0\xef\x3f\xb9\x15\x8b\x77\x05\xb9\x78\x14\xe9\xec\x78\x11\x17\x84\xca\xe8\x0b\x85\xed\x99\xe5\x53\xb3\x6d\xc7\x2e\x17\xb7\x5f\x35\xeb\x0a\x46\x2f\x2d\x10\xe4\x9a\x65\x5e\x80\x0d\x5b\x46\x87\xe6\x18\x67\xd8\xd2\x85\x25\x89\xbf\xd2\x7c\xe9\xfd\x63\xdf\xc6\x56\x94\xb9\xf7\x96\x70\x3f\x3f\xee\x40\x5d\x5d\xdf\x7d\xc1\xf0\xc7\x3b\x51\x3e\x93\xa3\x15\xfe\xe2\xf3\x9c\x5d\xfe\x4e\xac\x2f\xde\x71\xf4\x6a\x83\x4b\xef\x16\xfc\x5e\xb8\xeb\xbb\xcf\xbd\xca\x3c\x06\xc2\x67\x74\x25\xc8\x8e\xe4\x9d\x48\x37\x95\xb5\x77\x64\x84\x7a\x1c\xf6\x28\xa0\x5b\x5f\x45\xfa\xc4\xcf\xef\x84\xf9\xd5\xcb\x23\x8a\xaf\x5c\x16\x2e\x37\x35\xd4\x8f\x60\x0e\x64\x31\x1d\xf9\x61\xdf\x38\xec\xf2\x26\xb9\xc0\x60\x7e\x48\x00\x18\xf5\x6e\x9e\xc2\xe9\x6f\x1f\xc6\xff\xfc\xfd\xaf\x93\xfa\xe7\xf4\x80\x14\xbd\x21\xae\xa3\xd8\xf8\xde\xe7\xcb\xbb\x0b\x63\x7c\xd5\x97\x5a\x74\x90\xab\x8a\xfe\x95\xb1\x06\x7c\x5b\xde\xf9\x3c\xcc\xae\xef\xdf\xb4\xef\xe6\xf6\xeb\xd5\x9b\x36\xbe\x5b\xb0\x83\x79\xf3\x35\xe1\xae\x18\x73\xe7\x43\x64\x13\x6e\xc4\x67\x03\xbb\xee\x5f\x96\x50\xed\xd2\x25\x7e\x42\x96\x05\x3e\xbf\x5b\x8e\x6b\x2d\xb5\x4b\x34\xf4\x27\x30\xd1\x81\x00\x62\xb7\x10\x9c\x65\x47\xdd\x57\xec\x72\xa1\x10\x8e\xbc\x93\xeb\x2a\x97\xe2\xe5\x92\xcc\x63\x5f\x22\x38\x1c\xac\x95\xd8\x81\x54\xcb\x91\x8a\x81\xa5\x57\x4d\xde\x6e\x40\x11\x5c\x1f\xa3\x37\xeb\x4d\x6a\x0f\x8e\x52\x41\x5b\xda\xf6\xe9\x7b\xe7\xaa\x6f\x7b\xd4\xd9\x55\xdb\x24\x5d\x7c\xd7\x8b\x7d\x0b\x50\x77\x2b\xd4\xe9\xdd\xde\xcc\xc5\xca\x51\x3c\xca\xe2\x43\x55\x64\xc4\x58\x85\x37\xd4\x91\x69\xdf\x4e\x25\xe9\xe7\x41\xcb\xf6\x1f\x2e\x25\x8d\x77\x19\x77\x7a\xf4\x61\x16\x36\x1b\x9b\xfe\x83\x62\xa2\xd6\x4e\x03\xbb\x10\xd1\x19\x0a\x93\x17\x40\x83\x7e\xb5\x43\xe1\x64\x8b\xb5\x6d\x4b\xea\x1e\x51\x65\x4c\x4e\xb2\xd3\x35\x9e\xf6\x07\x70\xd2\xc4\xa4\xcb\x30\x0a\xe9\xa9\xcd\x83\x06\x14\x64\x96\xe8\x38\x14\x29\x96\x5c\x46\x99\xb6\x95\xda\xa2\x04\xea\xcf\x95\x4f\x4b\x72\x4d\xe9\x1e\x91\x6d\xd8\x30\xb2\x65\x4d\xa9\x68\xa7\x83\x50\x0a\x7b\x61\x78\x74\xfe\xc9\x81\x17\x78\xd2\x9e\xb6\x17\x36\xed\x2f\x4b\xbb\x56\xfa\x68\xed\x56\x8b\x89\x00\xe4\xbc\x22\x07\xda\xf5\x4d\xe0\xc1\x75\x65\xaa\x1b\xe5\x5e\xd0\x39\x01\x66\x8d\x4c\xf4\x5c\x5a\x36\x1c\xed\xba\xee\xa9\xd7\x1d\x5f\x80\xb8\xc4\xa8\x22\x4b\x48\x9d\xb2\xf1\x45\xe9\x9d\x6a\xbd\x17\xd6\x24\x35\xce\x7d\x15\x41\x30\x2e\x53\x7f\x88\x2e\x35\x7b\x2c\x75\xe3\xe9\x03\xed\xe0\x27\x9d\xa6\x5e\x52\x06\xf4\x9a\xba\x4b\x9f\xd0\x3a\xba\x0c\x13\xf8\xea\x0c\x35\x9e\x9e\x9d\x25\xcd\x17\x84\x4e\xc9\x24\xc5\x6c\x34\x31\xc0\xaa\x83\xa6\xe9\x54\x43\xe7\x94\x01\xca\x9c\xa3\xa0\xb0\x5d\xc3\x18\x58\xd7\x8c\x2f\x28\x40\x89\x12\xdb\x1c\x70\x71\x33\x4b\x8f\x06\xbd\xa0\x4b\xac\x43\x2e\x60\x41\x30\x47\xf3\xf8\x84\x92\x85\x71\x52\xdd\xc2\x4b\xfd\xa5\x3a\xc4\xc8\x73\xb6\x1c\x93\xca\x0d\x89\x53\x63\xf6\x42\xa2\x5b\x37\xc2\xef\x71\x31\x39\xe9\xd9\x7f\x38\xad\x03\x58\x0c\xf1\x5e\xd0\x05\x6e\x5f\xcd\x86\x72\xf9\xc2\x4b\x81\x71\x0a\xda\x8f\x8f\x23\x17\xf4\xa3\x39\xbf\xa0\x10\x30\x1f\xa4\xf3\xea\x79\x21\x0c\x43\x15\xe3\x50\x02\xba\x4d\x67\x34\x0b\xed\x05\x2f\x82\x77\x34\x7e\xf2\x92\x9d\x6d\xdf\x17\x06\xa0\x61\xef\x71\x6a\x73\x0b\x60\xa4\xdc\xcb\x5a\xbf\x0d\x56\x81\x36\x0b\x95\x08\xb9\xd8\xe4\xea\x97\x39\xae\x1d\xb3\xd8\xc3\x99\xa6\x15\x60\x97\xfc\x81\x15\xb3\x8a\x65\x15\xcf\x20\x54\x66\x09\x18\x12\xdf\x96\xdd\x30\xb3\x8f\xd5\x9c\x4c\xb4\x90\x6b\xd6\x6d\x0e\xab\xdf\xb1\x83\x50\x15\x05\x0a\x7f\x4f\xa1\x61\x6a\x36\x9b\xfc\x91\x04\x18\xe4\xf5\x55\xe3\xf4\x5d\x4b\x47\x1c\x4f\x1b\xde\x62\xd9\x6d\xe2\xbf\x5f\x97\xd4\xde\xd3\x7a\x7c\xa3\xfc\xcd\xcd\x30\x14\x9c\x3a\xf4\xe0\xba\x64\x83\xd6\xae\x35\x45\xb4\x2e\x90\x81\xfa\x84\x26\xe2\xb0\xf4\x12\xa1\x5c\x4a\x7a\x78\xea\x26\xd4\x41\xd0\xf4\x7c\xd4\x3e\x4b\xb2\xcb\x58\x3d\xa4\xb9\x6d\xb9\xbe\x12\x1e\x4e\x70\xee\x34\xa2\xec\x38\x4a\x45\x0f\x27\x50\x7a\x8b\xc2\x71\x3d\xec\x26\x9f\xbc\x00\x3d\x63\x51\x5a\x3a\x03\xde\x97\xb2\xa5\x13\xea\x7b\x07\x15\x90\xcd\xba\xf6\xac\x15\x5a\xce\xce\x86\x19\x4e\x1c\x71\x80\xb4\xef\xe1\x04\x0c\x86\xa4\xd4\x52\xfc\x1c\xe7\x7a\xd5\x2c\xf5\xa2\x92\xe2\x0c\x82\xdf\x25\x3c\x08\xda\xc8\xaf\xf9\x14\xad\xa5\x0c\x1e\x4e\x66\xae\x21\xd0\x9b\xab\xe0\x75\x0f\xa9\x2f\x0e\xea\xa9\x9f\xb4\x52\xaf\x9d\xaf\x77\x49\x71\x7b\x16\x0e\xd4\x98\x87\x8a\xd3\xf6\xcd\xe7\x95\xd7\xad\x81\x32\x34\xfb\x17\xc6\x9f\x69\x1d\x6e\xea\x5c\xf2\xf2\xf4\x60\xed\xf3\x86\x3e\xe3\x25\xbb\xbd\x32\xbe\x98\xac\x4b\xc2\x29\xa8\x37\xd6\x13\xd1\x8b\xa6\xe9\xce\x4c\x35\xdf\xbc\x4c\xb7\xdc\x35\xf1\x0e\xff\xf9\xef\x68\x1b\xfa\x68\x0c\x95\x91\xb2\xeb\xfd\x3f\x4c\x4e\x6a\xb3\xb7\xff\x88\xa4\xcf\x4e\x35\x09\xbf\xfd\x3e\xaa\x09\x53\xf6\xad\xfd\xef\x43\x27\xff\x17\x00\x00\xff\xff\x7b\x35\xfa\xb8\x6b\x1a\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
